from collections import deque
import sys
input = sys.stdin.readline

n, m = map(int, input().split())    # 큐의 크기 n과 뽑아내려고 하는 수의 개수 m을 입력값으로 받기
position = list(map(int, input().split()))  # 뽑아내려는 수의 위치를 입력값으로 받기
dq = deque([i for i in range(1, n+1)])  # deque([1, 2, 3,...,n+1])
# dq = deque()
# for i in range(1, n+1):
#     dq.append(i)

count = 0   # 2, 3번 수행하면 카운트 올리기
for i in position:  # 뽑아내려는 수의 위치 하나씩 반복문 돌리기
    while True:     # 뽑을 때까지 계속 돌리기
        if dq[0] == i:  # dq의 첫인덱스가 뽑아내려는 수의 위치와 같다면 1번 수행
            dq.popleft()
            break
        else:
            if dq.index(i) < len(dq)/2:  # 뽑아내려는 수의 위치 인덱스가 dq의 길이를 반으로 나눈것보다 작을때는 왼쪽으로 움직여야 최소
                while dq[0] != i:   # dq의 첫번째 인덱스가 i와 같아질때까지 반복
                    dq.append(dq.popleft())  # 파이썬 첨부자료 확인
                    count += 1
            else:   # 뽑아내려는 수의 위치 인덱스가 dq의 길이를 반으로 나눈것보다 클때는 오른쪽으로 움직여야 최소
                while dq[0] != i:
                    dq.appendleft(dq.pop())  # 파이썬 첨부자료 확인
                    count += 1
print(count)


##예시##
# 10 3  ->  큐의 크기 n, 뽑아내려는 수의 개수 m
# 2 9 5  ->  뽑아내려는 수의 위치

n, m = 10, 3

# 위치만 필요하지 값은 상관없으니 편의상 위치와 값을 같게 설정했다.
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# 위치2 뽑기 -> 뽑을 위치 2가 n개 중에서 전반에 위치하므로 2번 수행
1. 2번 수행    [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]
2. 1번 수행    [3, 4, 5, 6, 7, 8, 9, 10, 1]

# 위치9 뽑기 -> 뽑을 위치 9가 n개 중에서 후반에 위치하므로 3번 수행
3. 3번 수행    [1, 3, 4, 5, 6, 7, 8, 9, 10]
   3번 수행    [10, 1, 3, 4, 5, 6, 7, 8, 9]
   3번 수행    [9, 10, 1, 3, 4, 5, 6, 7, 8]
4. 1번 수행    [10, 1, 3, 4, 5, 6, 7, 8]

# 위치5 뽑기 -> 뽑을 위치 5가 n개 중에서 후반에 위치하므로 3번 수행
5. 3번 수행    [8, 10, 1, 3, 4, 5, 6, 7]
   3번 수행    [7, 8, 10, 1, 3, 4, 5, 6]
   3번 수행    [6, 7, 8, 10, 1, 3, 4, 5]
   3번 수행    [5, 6, 7, 8, 10, 1, 3, 4]
6. 1번 수행    [6, 7, 8, 10, 1, 3, 4]