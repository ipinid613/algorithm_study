a, b = map(int, input().split())


def gcd(a, b):
    while b > 0:
        a, b = b, a % b

    return a


def lcm(a, b):
    return a * b // gcd(a, b)


print(gcd(a, b))
print(lcm(a, b))

# import math

# a, b = map(int, input().split())

# print(math.gcd(a, b))
# print(math.lcm(a, b))

# 최대공약수 GCD(Greatest Common Divisor)
# 최소공배수 LCM(Least Common Multiple)

# 호제법이란 말은 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 나타낸다.

# 2개의 자연수 a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a > b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다.

# 이 성질에 따라, b를 r로 나눈 나머지 r'를 구하고, 다시 r을 r'로 나눈 나머지를 구하는 과정을 반복하여
# 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.

# 24 - 1 2 3 4 6 8 12 24
# 18 - 1 2 3 6 9 18
#
# ex) a = 24
#     b = 18
#     a, b = b , a % b
#                 = r
#    24, 18 = 18, 6
#    18, 6  = 6,  0
#    6, 0! a = 6
#     -> 나머지가 0이 되었으니 나누는 수 6이 24와 18의 최대공약수
#
#     a = 48
#     b = 30
#     a, b = b ,a % b
#    48, 30 = 30, 18
#    30, 18 = 18, 12
#    18, 12 = 12, 6
#    12, 6  = 6, 0
#     -> 나머지가 0이 되었으니 나누는 수 6이 48와 30의 최대공약수
#
#     a = 5
#     b = 3
#     a, b = b ,a % b
#     5, 3 = 3, 2
#     3, 2 = 2, 1
#     2, 1 = 1, 0
#     -> 나머지가 0이 되었으니 나누는 수 1이 5와 3의 최대공약수
#
# 최소공배수는 a, b의 곱을 a, b의 최대 공약수로 나누면 나오게 된다.
# a = 24
# b = 18
# 24 * 18 // 6
# -> 72
#
# a = 48
# b = 30
# 48 * 30 // 6
# -> 240
#
# a = 5
# b = 3
# 5 * 3 // 1
# -> 15